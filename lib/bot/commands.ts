import { createClient } from '@/lib/supabase/server';
import { supabase } from '../supabase/client';

const ORDERS_PER_PAGE = 5;
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function isAdmin(telegramId: number): Promise<boolean> {
  const supabase = createClient();
  const { data } = await supabase
    .from('shop_admins')
    .select('role')
    .eq('telegram_id', telegramId)
    .eq('role', 'admin')
    .single();

  return !!data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserShop(telegramId: number) {
  const supabase = createClient();

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const { data: adminShops } = await supabase
    .from('shop_admins')
    .select('shops(*)')
    .eq('telegram_id', telegramId);

  if (adminShops && adminShops.length > 0) {
    return adminShops[0].shops;
  }

  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –∏—â–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: orders } = await supabase
    .from('orders')
    .select('shops(*)')
    .eq('user_id', telegramId)
    .order('created_at', { ascending: false })
    .limit(1);

  if (orders && orders.length > 0) {
    return orders[0].shops;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
  const { data: shops } = await supabase
    .from('shops')
    .select('*')
    .eq('status', 'active')
    .limit(1);

  return shops && shops.length > 0 ? shops[0] : null;
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
export async function processCommand(
  command: string,
  chatId: number,
  user: any,
) {
  const commandName = command.split(' ')[0].toLowerCase();
  const args = command.split(' ').slice(1);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const admin = await isAdmin(user.id);

  switch (commandName) {
    case '/start':
      return await handleStart(chatId, user, admin);
    case '/stats':
      return admin
        ? await handleStats(chatId)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/orders':
      return admin
        ? await handleOrders(chatId, args)
        : await handleUserOrders(chatId, user.id);
    case '/myorders':
      return await handleUserOrders(chatId, user.id);
    case '/ordersmgmt':
      return admin
        ? await handleOrders(chatId, args)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/products':
      return admin
        ? await handleProducts(chatId, args)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/addproduct':
      return admin
        ? await handleAddProduct(chatId)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/settings':
      return admin
        ? await handleSettings(chatId, args)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/help':
      return await handleHelp(chatId, admin);
    default:
      return await sendMessage(
        chatId,
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
      );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async function handleStart(chatId: number, user: any, isAdmin: boolean) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const supabase = createClient();
  try {
    await supabase.from('users').upsert({
      telegram_id: user.id,
      name: `${user.first_name || ''} ${user.last_name || ''}`.trim(),
      username: user.username || '',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }

  if (isAdmin) {
    const supabase = createClient();

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const { data: shops } = await supabase
      .from('shop_admins')
      .select('shops(*)')
      .eq('telegram_id', user.id);

    if (!shops || shops.length === 0) {
      return await sendMessage(
        chatId,
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤ –≤–µ–±-–∞–¥–º–∏–Ω–∫–µ.',
      );
    }

    let message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n';

    shops.forEach((shop: any, index: number) => {
      message += `${index + 1}. ${shop.shops.name}\n`;
    });

    message += '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    const keyboard = {
      keyboard: [
        [{ text: '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }, { text: '/ordersmgmt - –ó–∞–∫–∞–∑—ã' }],
        [
          { text: '/products - –¢–æ–≤–∞—Ä—ã' },
          { text: '/addproduct - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' },
        ],
        [{ text: '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }, { text: '/help - –°–ø—Ä–∞–≤–∫–∞' }],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    };

    await sendMessageWithKeyboard(chatId, message, keyboard);
  } else {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const shop = await getUserShop(user.id);

    if (!shop) {
      return await sendMessage(
        chatId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keyboard = {
      keyboard: [
        [{ text: '/myorders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }, { text: '/help - –°–ø—Ä–∞–≤–∫–∞' }],
        [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω' }],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    };

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
            web_app: {
              url: `https://telegram-mini-app-tan-ten.vercel.app/shop/${shop.id}`,
            },
          },
        ],
      ],
    };

    await sendMessageWithKeyboard(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "${shop.name}"!\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∫—É–ø–∫–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
      keyboard,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    await sendMessageWithKeyboard(
      chatId,
      '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É:',
      inlineKeyboard,
    );
  }
}

export async function processMessage(text: string, chatId: number, user: any) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω"
  if (text === '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω') {
    const shop = await getUserShop(user.id);

    if (!shop) {
      return await sendMessage(chatId, '–ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

    // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
            web_app: {
              url: `https://telegram-mini-app-tan-ten.vercel.app/shop/${shop.id}`,
            },
          },
        ],
      ],
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π
    return await sendMessageWithKeyboard(
      chatId,
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:',
      inlineKeyboard,
    );
  }
}
const USER_ORDERS_PER_PAGE = 3;
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserOrders(
  chatId: number,
  telegramId: number,
  page = 0,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const { count, error: countError } = await supabase
    .from('orders')
    .select('*', { count: 'exact', head: true })
    .eq('user_id', telegramId);

  if (countError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤:', countError);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  const totalOrders = count || 0;
  const totalPages = Math.ceil(totalOrders / USER_ORDERS_PER_PAGE);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  if (page < 0) page = 0;
  if (page >= totalPages && totalPages > 0) page = totalPages - 1;

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data: orders, error } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('user_id', telegramId)
    .order('created_at', { ascending: false })
    .range(page * USER_ORDERS_PER_PAGE, (page + 1) * USER_ORDERS_PER_PAGE - 1);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  if (!orders || orders.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
  }

  let message = `üõí <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages})</b>\n\n`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard: any = {
    inline_keyboard: [],
  };

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  for (const order of orders) {
    message += `<b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
    message += `–ú–∞–≥–∞–∑–∏–Ω: ${order.shops.name}\n`;
    message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
    message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n\n`;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    const { data: orderItems } = await supabase
      .from('orders_list')
      .select(
        `
        *,
        products:product_id (name)
      `,
      )
      .eq('order_id', order.id);

    if (orderItems && orderItems.length > 0) {
      message += `<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
      orderItems.forEach((item) => {
        message += `- ${item.products.name} x ${item.amount} —à—Ç. (${(item.price * item.amount).toFixed(2)} ‚ÇΩ)\n`;
      });
    }

    message += '\n';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    keyboard.inline_keyboard.push([
      {
        text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ #${order.id}`,
        callback_data: `view_order_${order.id}`,
      },
    ]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navButtons = [];
  if (page > 0) {
    navButtons.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `user_orders_page_${page - 1}`,
    });
  }
  if (page < totalPages - 1) {
    navButtons.push({
      text: '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
      callback_data: `user_orders_page_${page + 1}`,
    });
  }

  if (navButtons.length > 0) {
    keyboard.inline_keyboard.push(navButtons);
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}
async function handleViewOrder(
  chatId: number,
  orderId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
  const { data: order, error } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('id', orderId)
    .single();

  if (error || !order) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
  const { data: orderItems } = await supabase
    .from('orders_list')
    .select(
      `
      *,
      products:product_id (name)
    `,
    )
    .eq('order_id', orderId);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
  let message = `üìã <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n\n`;
  message += `–ú–∞–≥–∞–∑–∏–Ω: ${order.shops.name}\n`;
  message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
  message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
  message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n\n`;

  if (order.comment) message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
  if (orderItems && orderItems.length > 0) {
    message += `<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
    orderItems.forEach((item) => {
      message += `- ${item.products.name} x ${item.amount} —à—Ç. (${(item.price * item.amount).toFixed(2)} ‚ÇΩ)\n`;
    });
    message += '\n';
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'user_orders_back' }],
    ],
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
export async function sendOrderStatusNotification(
  telegram_id: number,
  order_id: string,
  shop_name: string,
  status: string,
): Promise<void> {
  const supabase = createClient();
  const statusText = getStatusText(status);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
  const { data: order, error: orderError } = await supabase
    .from('orders')
    .select('*')
    .eq('id', order_id)
    .single();

  if (orderError || !order) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ:', orderError);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
  const { data: orderItems, error: itemsError } = await supabase
    .from('orders_list')
    .select(
      `
      *,
      products:product_id (name)
    `,
    )
    .eq('order_id', order_id);

  if (itemsError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞:', itemsError);
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
  let message = `üîî <b>–í–∞—à –∑–∞–∫–∞–∑ #${order_id}</b>\n\n`;
  message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(status)} ${statusText}\n`;
  message += `–ú–∞–≥–∞–∑–∏–Ω: ${shop_name}\n`;
  message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
  message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
  if (orderItems && orderItems.length > 0) {
    message += `<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
    orderItems.forEach((item) => {
      message += `- ${item.products.name} x ${item.amount} —à—Ç. (${(item.price * item.amount).toFixed(2)} ‚ÇΩ)\n`;
    });
  }

  await sendMessage(telegram_id, message);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async function sendMessageWithKeyboard(
  chatId: number,
  text: string,
  keyboard: any,
) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
          reply_markup: keyboard,
        }),
      },
    );

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

async function handleStats(chatId: number) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
  const { data: orders, error: ordersError } = await supabase
    .from('orders')
    .select('*')
    .in('shop_id', shopIds);

  if (ordersError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
    return await sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.',
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('*')
    .in('shop_id', shopIds);

  if (productsError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', productsError);
    return await sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.',
    );
  }

  // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É
  const totalRevenue =
    orders?.reduce((sum, order) => sum + order.total_amount, 0) || 0;

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  let message = 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n';
  message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products?.length || 0}\n`;
  message += `üõí –ó–∞–∫–∞–∑–æ–≤: ${orders?.length || 0}\n`;
  message += `üí∞ –í—ã—Ä—É—á–∫–∞: ${totalRevenue.toFixed(2)} ‚ÇΩ\n\n`;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
  const pendingOrders =
    orders?.filter((order) => order.status === 'pending').length || 0;
  const completedOrders =
    orders?.filter((order) => order.status === 'completed').length || 0;

  message += `‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${pendingOrders}\n`;
  message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedOrders}\n`;

  await sendMessage(chatId, message);
}

async function handleOrders(
  chatId: number,
  args: string[],
  page = 0,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const { count, error: countError } = await supabase
    .from('orders')
    .select('*', { count: 'exact', head: true })
    .in('shop_id', shopIds);

  if (countError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤:', countError);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  const totalOrders = count || 0;
  const totalPages = Math.ceil(totalOrders / ORDERS_PER_PAGE);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  if (page < 0) page = 0;
  if (page >= totalPages && totalPages > 0) page = totalPages - 1;

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data: orders, error } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .in('shop_id', shopIds)
    .order('created_at', { ascending: false })
    .range(page * ORDERS_PER_PAGE, (page + 1) * ORDERS_PER_PAGE - 1);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  if (!orders || orders.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
  }

  let message = `üõí <b>–ó–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages})</b>\n\n`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard: any = {
    inline_keyboard: [],
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
  for (const order of orders) {
    message += `<b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
    message += `–ú–∞–≥–∞–∑–∏–Ω: ${order.shops.name}\n`;
    message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
    message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (order.user_id) {
      message += `Telegram ID: ${order.user_id}\n`;
    }
    if (order.telegram_username) {
      message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${order.telegram_username}\n`;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    const { data: orderItems } = await supabase
      .from('orders_list')
      .select(
        `
        *,
        products:product_id (name)
      `,
      )
      .eq('order_id', order.id);

    if (orderItems && orderItems.length > 0) {
      message += `\n<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
      orderItems.forEach((item) => {
        message += `- ${item.products.name} x ${item.amount} —à—Ç. (${(item.price * item.amount).toFixed(2)} ‚ÇΩ)\n`;
      });
    }

    message += '\n';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    keyboard.inline_keyboard.push([
      {
        text: `–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑ #${order.id}`,
        callback_data: `process_order_${order.id}`,
      },
    ]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navButtons = [];
  if (page > 0) {
    navButtons.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `orders_page_${page - 1}`,
    });
  }
  if (page < totalPages - 1) {
    navButtons.push({
      text: '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
      callback_data: `orders_page_${page + 1}`,
    });
  }

  if (navButtons.length > 0) {
    keyboard.inline_keyboard.push(navButtons);
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}

async function handleProcessOrder(
  chatId: number,
  orderId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
  const { data: order, error } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('id', orderId)
    .single();

  if (error || !order) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
  const { data: orderItems } = await supabase
    .from('orders_list')
    .select(
      `
      *,
      products:product_id (name)
    `,
    )
    .eq('order_id', orderId);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
  let message = `üìã <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n\n`;
  message += `–ú–∞–≥–∞–∑–∏–Ω: ${order.shops.name}\n`;
  message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
  message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
  message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (order.user_id) {
    message += `Telegram ID: ${order.user_id}\n`;
  }
  if (order.telegram_username) {
    message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${order.telegram_username}\n`;
  }

  if (order.phone) message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n`;
  if (order.email) message += `Email: ${order.email}\n`;
  if (order.comment) message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}\n\n`;

  message += `–ê–¥—Ä–µ—Å: ${formatAddress(order)}\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
  if (orderItems && orderItems.length > 0) {
    message += `<b>–¢–æ–≤–∞—Ä—ã:</b>\n`;
    orderItems.forEach((item) => {
      message += `- ${item.products.name} x ${item.amount} —à—Ç. (${(item.price * item.amount).toFixed(2)} ‚ÇΩ)\n`;
    });
    message += '\n';
  }

  message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          callback_data: `order_${order.id}_pending`,
        },
        {
          text: 'üîÑ –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
          callback_data: `order_${order.id}_processing`,
        },
      ],
      [
        { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `order_${order.id}_completed` },
        { text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω', callback_data: `order_${order.id}_cancelled` },
      ],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'orders_back' }],
    ],
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}
async function editMessageWithKeyboard(
  chatId: number,
  messageId: number,
  text: string,
  keyboard: any,
) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/editMessageText`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: text,
          parse_mode: 'HTML',
          reply_markup: keyboard,
        }),
      },
    );

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
function formatAddress(order: any): string {
  const parts = [];

  if (order.country) parts.push(order.country);
  if (order.city) parts.push(order.city);
  if (order.street) parts.push(order.street);
  if (order.house_number) parts.push(`–¥. ${order.house_number}`);

  if (!order.is_private_house) {
    if (order.apartment) parts.push(`–∫–≤. ${order.apartment}`);
    if (order.entrance) parts.push(`–ø–æ–¥—ä–µ–∑–¥ ${order.entrance}`);
    if (order.floor) parts.push(`—ç—Ç–∞–∂ ${order.floor}`);
    if (order.intercom_code) parts.push(`–¥–æ–º–æ—Ñ–æ–Ω ${order.intercom_code}`);
  }

  return parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω';
}
const PRODUCTS_PER_PAGE = 5;
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function handleProducts(
  chatId: number,
  args: string[],
  page = 0,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const { count, error: countError } = await supabase
    .from('products')
    .select('*', { count: 'exact', head: true })
    .in('shop_id', shopIds);

  if (countError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤:', countError);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.');
  }

  const totalProducts = count || 0;
  const totalPages = Math.ceil(totalProducts / PRODUCTS_PER_PAGE);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  if (page < 0) page = 0;
  if (page >= totalPages && totalPages > 0) page = totalPages - 1;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const { data: products, error } = await supabase
    .from('products')
    .select('*')
    .in('shop_id', shopIds)
    .order('created_at', { ascending: false })
    .range(page * PRODUCTS_PER_PAGE, (page + 1) * PRODUCTS_PER_PAGE - 1);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.');
  }

  if (!products || products.length === 0) {
    return await sendMessage(
      chatId,
      '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproduct –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.',
    );
  }

  let message = `üì¶ <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages})</b>\n\n`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard: any = {
    inline_keyboard: [],
  };

  products.forEach((product, index) => {
    message += `<b>${index + 1}. ${product.name}</b>\n`;
    message += `–¶–µ–Ω–∞: ${product.price.toFixed(2)} ‚ÇΩ\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${product.status === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    keyboard.inline_keyboard.push([
      {
        text: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${product.name}`,
        callback_data: `edit_product_${product.id}`,
      },
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navButtons = [];
  if (page > 0) {
    navButtons.push({
      text: '‚óÄÔ∏è –ù–∞–∑–∞–¥',
      callback_data: `products_page_${page - 1}`,
    });
  }
  if (page < totalPages - 1) {
    navButtons.push({
      text: '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
      callback_data: `products_page_${page + 1}`,
    });
  }

  if (navButtons.length > 0) {
    keyboard.inline_keyboard.push(navButtons);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  keyboard.inline_keyboard.push([
    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä', callback_data: 'add_product' },
  ]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  keyboard.inline_keyboard.push([
    { text: 'üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'manage_categories' },
  ]);

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProduct(
  chatId: number,
  productId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .single();

  if (error || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
  let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n`;
  message += `<b>${product.name}</b>\n`;
  message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `–¶–µ–Ω–∞: ${product.price.toFixed(2)} ‚ÇΩ\n`;
  message += `–°—Ç–∞—Ç—É—Å: ${product.status === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
  message += `–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${product.allow_quantity_change ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
  message += `–û—Å—Ç–∞—Ç–æ–∫: ${product.amount || 0} —à—Ç.\n\n`;

  message += `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ',
          callback_data: `edit_product_name_${productId}`,
        },
        {
          text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ',
          callback_data: `edit_product_description_${productId}`,
        },
      ],
      [
        { text: 'üí∞ –¶–µ–Ω–∞', callback_data: `edit_product_price_${productId}` },
        {
          text: 'üî¢ –û—Å—Ç–∞—Ç–æ–∫',
          callback_data: `edit_product_amount_${productId}`,
        },
      ],
      [
        {
          text: 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          callback_data: `edit_product_images_${productId}`,
        },
        {
          text: 'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è',
          callback_data: `edit_product_category_${productId}`,
        },
      ],
      [
        {
          text:
            product.status === 'active'
              ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
              : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
          callback_data: `toggle_product_status_${productId}`,
        },
        {
          text: product.allow_quantity_change
            ? '‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞'
            : '‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞',
          callback_data: `toggle_product_quantity_${productId}`,
        },
      ],
      [
        {
          text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä',
          callback_data: `delete_product_${productId}`,
        },
        { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: 'products_back' },
      ],
    ],
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
async function toggleProductStatus(
  chatId: number,
  productId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
  const { data: product, error: getError } = await supabase
    .from('products')
    .select('status')
    .eq('id', productId)
    .single();

  if (getError || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  const newStatus = product.status === 'active' ? 'inactive' : 'active';

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
  const { error: updateError } = await supabase
    .from('products')
    .update({ status: newStatus })
    .eq('id', productId);

  if (updateError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞: ${updateError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  await sendMessage(
    chatId,
    `‚úÖ –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus === 'active' ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}".`,
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
  await handleEditProduct(chatId, productId, messageId);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProductDescription(chatId: number, productId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('name, description')
    .eq('id', productId)
    .single();

  if (error || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  await supabase.from('bot_dialog_states').upsert({
    telegram_id: chatId,
    state: 'editing_product_description',
    data: { product_id: productId, product_name: product.name },
    updated_at: new Date().toISOString(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  await sendMessage(
    chatId,
    `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ <b>${product.name}</b>\n\n` +
      `–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${product.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`,
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
async function toggleProductQuantity(
  chatId: number,
  productId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–≤–∞—Ä–∞
  const { data: product, error: getError } = await supabase
    .from('products')
    .select('allow_quantity_change')
    .eq('id', productId)
    .single();

  if (getError || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const newValue = !product.allow_quantity_change;

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–≤–∞—Ä–∞
  const { error: updateError } = await supabase
    .from('products')
    .update({ allow_quantity_change: newValue })
    .eq('id', productId);

  if (updateError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${updateError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  await sendMessage(
    chatId,
    `‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${newValue ? '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' : '–∑–∞–ø—Ä–µ—â–µ–Ω–æ'}".`,
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
  await handleEditProduct(chatId, productId, messageId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function deleteProduct(
  chatId: number,
  productId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–∞—Ö
  const { data: orderItems, error: checkError } = await supabase
    .from('orders_list')
    .select('id')
    .eq('product_id', productId)
    .limit(1);

  if (checkError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞: ${checkError.message}`,
    );
    return;
  }

  // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (orderItems && orderItems.length > 0) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_product_${productId}` },
          {
            text: '‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ',
            callback_data: `force_delete_product_${productId}`,
          },
        ],
      ],
    };

    await sendMessageWithKeyboard(
      chatId,
      `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–∫–∞–∑–∞—Ö. –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –æ—Ç—á–µ—Ç–∞—Ö.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?`,
      keyboard,
    );
    return;
  }

  // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∑–∞–∫–∞–∑–∞—Ö –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
  const { error: deleteError } = await supabase
    .from('products')
    .delete()
    .eq('id', productId);

  if (deleteError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${deleteError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
  await sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
  await handleProducts(chatId, [], 0, messageId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleAddCategory(chatId: number) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId)
    .limit(1);

  if (!shops || shops.length === 0) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.`);
    return;
  }

  const shopId = shops[0].shop_id;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  await supabase.from('bot_dialog_states').upsert({
    telegram_id: chatId,
    state: 'adding_category',
    data: { shop_id: shopId },
    updated_at: new Date().toISOString(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  await sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleEditCategory(
  chatId: number,
  categoryId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: category, error } = await supabase
    .from('categories')
    .select('*')
    .eq('id', categoryId)
    .single();

  if (error || !category) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è #${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
    );
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n`;
  message += `<b>${category.name}</b>\n\n`;
  message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å',
          callback_data: `rename_category_${categoryId}`,
        },
        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_category_${categoryId}` },
      ],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'manage_categories' }],
    ],
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleRenameCategory(chatId: number, categoryId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: category, error } = await supabase
    .from('categories')
    .select('*')
    .eq('id', categoryId)
    .single();

  if (error || !category) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è #${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
    );
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  await supabase.from('bot_dialog_states').upsert({
    telegram_id: chatId,
    state: 'renaming_category',
    data: { category_id: categoryId, current_name: category.name },
    updated_at: new Date().toISOString(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  await sendMessage(
    chatId,
    `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>${category.name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`,
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleDeleteCategory(
  chatId: number,
  categoryId: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: category, error: categoryError } = await supabase
    .from('categories')
    .select('*')
    .eq('id', categoryId)
    .single();

  if (categoryError || !category) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è #${categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('id')
    .eq('category_id', categoryId)
    .limit(1);

  if (productsError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: ${productsError.message}`,
    );
    return;
  }

  // –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (products && products.length > 0) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `edit_category_${categoryId}` },
          {
            text: '‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ',
            callback_data: `force_delete_category_${categoryId}`,
          },
        ],
      ],
    };

    await sendMessageWithKeyboard(
      chatId,
      `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.name}" –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?`,
      keyboard,
    );
    return;
  }

  // –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
  await deleteCategory(chatId, categoryId, category.name, messageId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function deleteCategory(
  chatId: number,
  categoryId: string,
  categoryName: string,
  messageId?: number,
) {
  const supabase = createClient();

  // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const { error: deleteError } = await supabase
    .from('categories')
    .delete()
    .eq('id', categoryId);

  if (deleteError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${deleteError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
  await sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  await handleManageCategories(chatId, messageId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
export async function processDialogState(
  text: string,
  chatId: number,
  user: any,
) {
  const supabase = createClient();
  console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞:', { text, chatId });

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    const { data: dialogState, error } = await supabase
      .from('bot_dialog_states')
      .select('*')
      .eq('telegram_id', chatId)
      .single();

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', error);
      await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞.');
      return await processMessage(text, chatId, user);
    }

    if (!dialogState) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞');
      return await processMessage(text, chatId, user);
    }

    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:', dialogState);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    switch (dialogState.state) {
      case 'editing_product_name':
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', {
          productId: dialogState.data.product_id,
          newName: text,
        });

        const { error: nameError } = await supabase
          .from('products')
          .update({ name: text })
          .eq('id', dialogState.data.product_id);

        if (nameError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', nameError);
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${nameError.message}`,
          );
        } else {
          console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
          await sendMessage(
            chatId,
            `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å "${dialogState.data.current_name}" –Ω–∞ "${text}"!`,
          );
          await handleEditProduct(chatId, dialogState.data.product_id);
        }
        break;

      case 'editing_product_description':
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', {
          productId: dialogState.data.product_id,
          newDescription: text,
        });

        const { error: descriptionError } = await supabase
          .from('products')
          .update({ description: text })
          .eq('id', dialogState.data.product_id);

        if (descriptionError) {
          console.error(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:',
            descriptionError,
          );
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${descriptionError.message}`,
          );
        } else {
          console.log('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
          await sendMessage(
            chatId,
            `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ "${dialogState.data.product_name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`,
          );
          await handleEditProduct(chatId, dialogState.data.product_id);
        }
        break;

      case 'editing_product_price':
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
        const price = parseFloat(text);

        if (isNaN(price) || price <= 0) {
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).`,
          );
          return;
        }

        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞:', {
          productId: dialogState.data.product_id,
          newPrice: price,
        });

        const { error: priceError } = await supabase
          .from('products')
          .update({ price })
          .eq('id', dialogState.data.product_id);

        if (priceError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞:', priceError);
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞: ${priceError.message}`,
          );
        } else {
          console.log('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
          await sendMessage(
            chatId,
            `‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ "${dialogState.data.product_name}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${price.toFixed(2)} ‚ÇΩ!`,
          );
          await handleEditProduct(chatId, dialogState.data.product_id);
        }
        break;

      case 'editing_product_amount':
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
        const amount = parseInt(text);

        if (isNaN(amount) || amount < 0) {
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).`,
          );
          return;
        }

        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞:', {
          productId: dialogState.data.product_id,
          newAmount: amount,
        });

        const { error: amountError } = await supabase
          .from('products')
          .update({ amount })
          .eq('id', dialogState.data.product_id);

        if (amountError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞:', amountError);
          await sendMessage(
            chatId,
            `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: ${amountError.message}`,
          );
        } else {
          console.log('–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
          await sendMessage(
            chatId,
            `‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ "${dialogState.data.product_name}" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${amount} —à—Ç.!`,
          );
          await handleEditProduct(chatId, dialogState.data.product_id);
        }
        break;

      // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞...

      default:
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:', dialogState.state);
        await sendMessage(
          chatId,
          `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.`,
        );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞:', error);
    await sendMessage(
      chatId,
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
    );
  } finally {
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    try {
      await supabase
        .from('bot_dialog_states')
        .delete()
        .eq('telegram_id', chatId);
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async function handleEditProductName(chatId: number, productId: string) {
  const supabase = createClient();
  console.log('–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', { chatId, productId });

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('name')
    .eq('id', productId)
    .single();

  if (error || !product) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  console.log('–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω:', product);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  const { error: dialogError } = await supabase
    .from('bot_dialog_states')
    .upsert({
      telegram_id: chatId,
      state: 'editing_product_name',
      data: { product_id: productId, current_name: product.name },
      updated_at: new Date().toISOString(),
    });

  if (dialogError) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', dialogError);
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.`);
    return;
  }

  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  await sendMessage(
    chatId,
    `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n` +
      `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>${product.name}</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`,
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
async function handleEditProductPrice(chatId: number, productId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('name, price')
    .eq('id', productId)
    .single();

  if (error || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  await supabase.from('bot_dialog_states').upsert({
    telegram_id: chatId,
    state: 'editing_product_price',
    data: { product_id: productId, product_name: product.name },
    updated_at: new Date().toISOString(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
  await sendMessage(
    chatId,
    `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ <b>${product.name}</b>\n\n` +
      `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.price.toFixed(2)} ‚ÇΩ\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):`,
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
async function handleEditProductAmount(chatId: number, productId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('name, amount')
    .eq('id', productId)
    .single();

  if (error || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  await supabase.from('bot_dialog_states').upsert({
    telegram_id: chatId,
    state: 'editing_product_amount',
    data: { product_id: productId, product_name: product.name },
    updated_at: new Date().toISOString(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
  await sendMessage(
    chatId,
    `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ <b>${product.name}</b>\n\n` +
      `–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${product.amount || 0} —à—Ç.\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):`,
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
async function handleEditProductCategory(chatId: number, productId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error: productError } = await supabase
    .from('products')
    .select('name, category_id')
    .eq('id', productId)
    .single();

  if (productError || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
    return;
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: categories, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .in('shop_id', shopIds)
    .order('name', { ascending: true });

  if (categoriesError) {
    await sendMessage(
      chatId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesError.message}`,
    );
    return;
  }

  if (!categories || categories.length === 0) {
    await sendMessage(
      chatId,
      `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏".`,
    );
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  let message = `üè∑Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${product.name}"</b>\n\n`;
  message += `–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_id ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n\n`;
  message += `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const keyboard: {
    inline_keyboard: Array<Array<{ text: string; callback_data: string }>>;
  } = {
    inline_keyboard: [],
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  keyboard.inline_keyboard.push([
    {
      text: '‚ùå –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      callback_data: `set_product_category_${productId}_null`,
    },
  ]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  categories.forEach((category) => {
    keyboard.inline_keyboard.push([
      {
        text: category.name,
        callback_data: `set_product_category_${productId}_${category.id}`,
      },
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  keyboard.inline_keyboard.push([
    { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `edit_product_${productId}` },
  ]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  await sendMessageWithKeyboard(chatId, message, keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
async function handleEditProductImages(chatId: number, productId: string) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
  const { data: product, error } = await supabase
    .from('products')
    .select('name, images')
    .eq('id', productId)
    .single();

  if (error || !product) {
    await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä #${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
  let message = `üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${product.name}"</b>\n\n`;

  if (!product.images || product.images.length === 0) {
    message += `–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n`;
  } else {
    message += `–£ —Ç–æ–≤–∞—Ä–∞ ${product.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n`;
  }

  message += `–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n`;
  message += `–í Telegram –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é.`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  const keyboard: {
    inline_keyboard: Array<Array<{ text: string; callback_data: string }>>;
  } = {
    inline_keyboard: [
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: `edit_product_${productId}` }],
    ],
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  await sendMessageWithKeyboard(chatId, message, keyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async function handleManageCategories(chatId: number, messageId?: number) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const { data: categories, error } = await supabase
    .from('categories')
    .select('*')
    .in('shop_id', shopIds)
    .order('name', { ascending: true });

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    return await sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.',
    );
  }

  let message = `üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n`;

  if (!categories || categories.length === 0) {
    message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!';
  } else {
    message += '–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n';
    categories.forEach((category, index) => {
      message += `${index + 1}. ${category.name}\n`;
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  const keyboard: {
    inline_keyboard: Array<Array<{ text: string; callback_data: string }>>;
  } = {
    inline_keyboard: [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'add_category' }],
    ],
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (categories && categories.length > 0) {
    categories.forEach((category) => {
      keyboard.inline_keyboard.push([
        {
          text: `‚úèÔ∏è ${category.name}`,
          callback_data: `edit_category_${category.id}`,
        },
      ]);
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  keyboard.inline_keyboard.push([
    { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', callback_data: 'products_back' },
  ]);

  // –ï—Å–ª–∏ –µ—Å—Ç—å messageId, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
  if (messageId) {
    await editMessageWithKeyboard(chatId, messageId, message, keyboard);
  } else {
    await sendMessageWithKeyboard(chatId, message, keyboard);
  }
}
// TODO: –°–¥–µ–ª–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function handleAddProduct(chatId: number) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
  // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

  await sendMessage(
    chatId,
    '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n\n' +
      '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' +
      '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É\n' +
      '4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n' +
      '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
  );
}
// TODO: –°–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
async function handleSettings(chatId: number, args: string[]) {
  await sendMessage(
    chatId,
    '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n' +
      '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/settings name –ù–û–í–û–ï_–ù–ê–ó–í–ê–ù–ò–ï - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n' +
      '/settings description –ù–û–í–û–ï_–û–ü–ò–°–ê–ù–ò–ï - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n' +
      '/settings welcome –ù–û–í–û–ï_–ü–†–ò–í–ï–¢–°–¢–í–ò–ï - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n' +
      '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
  );
}

//  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleHelp(chatId: number, isAdmin: boolean) {
  let helpMessage = 'ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n';

  if (isAdmin) {
    helpMessage +=
      '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
      '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n' +
      '/ordersmgmt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n' +
      '/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n' +
      '/addproduct - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n' +
      '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞\n' +
      '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
      '/help –ö–û–ú–ê–ù–î–ê';
  } else {
    helpMessage +=
      '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
      '/myorders - –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n' +
      '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞';
  }

  await sendMessage(chatId, helpMessage);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending':
      return '‚è≥';
    case 'processing':
      return 'üîÑ';
    case 'completed':
      return '‚úÖ';
    case 'cancelled':
      return '‚ùå';
    default:
      return '‚ùì';
  }
}

function getStatusText(status: string): string {
  switch (status) {
    case 'pending':
      return '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
    case 'processing':
      return '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É';
    case 'completed':
      return '–í—ã–ø–æ–ª–Ω–µ–Ω';
    case 'cancelled':
      return '–û—Ç–º–µ–Ω–µ–Ω';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

//  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId: number, text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
        }),
      },
    );

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
export async function sendOrderNotificationToAdmins(
  order_id: string,
  shop_id: string,
  total_amount: number,
  customer_info: string,
): Promise<void> {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
  const { data: admins, error } = await supabase
    .from('shop_admins')
    .select('telegram_id')
    .eq('shop_id', shop_id)
    .eq('role', 'admin');

  if (error || !admins || admins.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
  const { data: shop } = await supabase
    .from('shops')
    .select('name')
    .eq('id', shop_id)
    .single();

  const shopName = shop ? shop.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω';

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '–ü—Ä–∏–Ω—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
          callback_data: `order_${order_id}_processing`,
        },
        { text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `order_${order_id}_completed` },
      ],
      [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `order_${order_id}_cancelled` }],
    ],
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  for (const admin of admins) {
    const message =
      `üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order_id}</b>\n\n` +
      `–ú–∞–≥–∞–∑–∏–Ω: ${shopName}\n` +
      `–°—É–º–º–∞: ${total_amount.toFixed(2)} ‚ÇΩ\n` +
      `–ö–ª–∏–µ–Ω—Ç: ${customer_info}\n\n` +
      `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji('pending')} ${getStatusText('pending')}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await sendMessageWithKeyboard(admin.telegram_id, message, keyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
export async function processCallback(
  callbackData: string,
  chatId: number,
  messageId: number,
): Promise<void> {
  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
  if (
    callbackData.startsWith('order_') &&
    callbackData.split('_').length === 3
  ) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    const parts = callbackData.split('_');
    const orderId = parts[1];
    const newStatus = parts[2];

    await updateOrderStatus(orderId, newStatus, chatId);
    // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
    await handleProcessOrder(chatId, orderId, messageId);
  } else if (callbackData.startsWith('process_order_')) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const orderId = callbackData.substring('process_order_'.length);
    await handleProcessOrder(chatId, orderId, messageId);
  } else if (callbackData.startsWith('orders_page_')) {
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
    const page = parseInt(callbackData.substring('orders_page_'.length), 10);
    await handleOrders(chatId, [], page, messageId);
  } else if (callbackData === 'orders_back') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    await handleOrders(chatId, [], 0, messageId);
  } else if (callbackData.startsWith('products_page_')) {
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    const page = parseInt(callbackData.substring('products_page_'.length), 10);
    await handleProducts(chatId, [], page, messageId);
  } else if (callbackData === 'products_back') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    await handleProducts(chatId, [], 0, messageId);
  } else if (callbackData.startsWith('edit_product_name_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('edit_product_name_'.length);
    await handleEditProductName(chatId, productId);
  } else if (callbackData.startsWith('edit_product_description_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring(
      'edit_product_description_'.length,
    );
    await handleEditProductDescription(chatId, productId);
  } else if (callbackData.startsWith('edit_product_price_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('edit_product_price_'.length);
    await handleEditProductPrice(chatId, productId);
  } else if (callbackData.startsWith('edit_product_amount_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('edit_product_amount_'.length);
    await handleEditProductAmount(chatId, productId);
  } else if (callbackData.startsWith('edit_product_images_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('edit_product_images_'.length);
    await handleEditProductImages(chatId, productId);
  } else if (callbackData.startsWith('edit_product_category_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('edit_product_category_'.length);
    await handleEditProductCategory(chatId, productId);
  } else if (callbackData.startsWith('edit_product_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ–±—â–∏–π —Å–ª—É—á–∞–π)
    const productId = callbackData.substring('edit_product_'.length);
    await handleEditProduct(chatId, productId, messageId);
  } else if (callbackData === 'add_product') {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    await handleAddProduct(chatId);
  } else if (callbackData === 'manage_categories') {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await handleManageCategories(chatId, messageId);
  } else if (callbackData.startsWith('toggle_product_status_')) {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('toggle_product_status_'.length);
    await toggleProductStatus(chatId, productId, messageId);
  } else if (callbackData.startsWith('toggle_product_quantity_')) {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('toggle_product_quantity_'.length);
    await toggleProductQuantity(chatId, productId, messageId);
  } else if (callbackData.startsWith('delete_product_')) {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('delete_product_'.length);
    await deleteProduct(chatId, productId, messageId);
  } else if (callbackData.startsWith('force_delete_product_')) {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const productId = callbackData.substring('force_delete_product_'.length);
    await deleteProduct(chatId, productId, messageId);
  } else if (callbackData === 'add_category') {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await handleAddCategory(chatId);
  } else if (callbackData.startsWith('edit_category_')) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryId = callbackData.substring('edit_category_'.length);
    await handleEditCategory(chatId, categoryId, messageId);
  } else if (callbackData.startsWith('rename_category_')) {
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryId = callbackData.substring('rename_category_'.length);
    await handleRenameCategory(chatId, categoryId);
  } else if (callbackData.startsWith('delete_category_')) {
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryId = callbackData.substring('delete_category_'.length);
    await handleDeleteCategory(chatId, categoryId, messageId);
  } else if (callbackData.startsWith('force_delete_category_')) {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryId = callbackData.substring('force_delete_category_'.length);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: category } = await supabase
      .from('categories')
      .select('name')
      .eq('id', categoryId)
      .single();

    if (category) {
      await deleteCategory(chatId, categoryId, category.name, messageId);
    } else {
      await sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }
  } else if (callbackData.startsWith('set_product_category_')) {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    const parts = callbackData
      .substring('set_product_category_'.length)
      .split('_');
    const productId = parts[0];
    const categoryId = parts[1] === 'null' ? null : parts[1];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
    const { error: updateError } = await supabase
      .from('products')
      .update({ category_id: categoryId })
      .eq('id', productId);

    if (updateError) {
      await sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: ${updateError.message}`,
      );
    } else {
      await sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
      await handleEditProduct(chatId, productId, messageId);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function updateOrderStatus(
  orderId: string,
  status: string,
  adminId: number,
): Promise<void> {
  const supabase = createClient();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
  const { data: order, error: orderError } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('id', orderId)
    .single();

  if (orderError || !order) {
    await sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: adminAccess } = await supabase
    .from('shop_admins')
    .select('*')
    .eq('telegram_id', adminId)
    .eq('shop_id', order.shop_id)
    .single();

  if (!adminAccess) {
    await sendMessage(
      adminId,
      `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º.`,
    );
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  const { error: updateError } = await supabase
    .from('orders')
    .update({
      status,
      updated_at: new Date().toISOString(),
    })
    .eq('id', orderId);

  if (updateError) {
    await sendMessage(
      adminId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: ${updateError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await sendMessage(
    adminId,
    `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${getStatusText(status)}"`,
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (order.user_id) {
    await sendOrderStatusNotification(
      order.user_id,
      orderId,
      order.shops.name,
      status,
    );
  }
}
