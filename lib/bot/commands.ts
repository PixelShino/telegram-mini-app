import { createClient } from '@/lib/supabase/server';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function isAdmin(telegramId: number): Promise<boolean> {
  const supabase = createClient();
  const { data } = await supabase
    .from('shop_admins')
    .select('role')
    .eq('telegram_id', telegramId)
    .eq('role', 'admin')
    .single();

  return !!data;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserShop(telegramId: number) {
  const supabase = createClient();

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const { data: adminShops } = await supabase
    .from('shop_admins')
    .select('shops(*)')
    .eq('telegram_id', telegramId);

  if (adminShops && adminShops.length > 0) {
    return adminShops[0].shops;
  }

  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –∏—â–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: orders } = await supabase
    .from('orders')
    .select('shops(*)')
    .eq('user_id', telegramId)
    .order('created_at', { ascending: false })
    .limit(1);

  if (orders && orders.length > 0) {
    return orders[0].shops;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
  const { data: shops } = await supabase
    .from('shops')
    .select('*')
    .eq('status', 'active')
    .limit(1);

  return shops && shops.length > 0 ? shops[0] : null;
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
export async function processCommand(
  command: string,
  chatId: number,
  user: any,
) {
  const commandName = command.split(' ')[0].toLowerCase();
  const args = command.split(' ').slice(1);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const admin = await isAdmin(user.id);

  switch (commandName) {
    case '/start':
      return await handleStart(chatId, user, admin);
    case '/stats':
      return admin
        ? await handleStats(chatId)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/orders':
      return admin
        ? await handleOrders(chatId, args)
        : await handleUserOrders(chatId, user.id);
    case '/products':
      return admin
        ? await handleProducts(chatId, args)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/addproduct':
      return admin
        ? await handleAddProduct(chatId)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/settings':
      return admin
        ? await handleSettings(chatId, args)
        : await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    case '/help':
      return await handleHelp(chatId, admin);
    default:
      return await sendMessage(
        chatId,
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
      );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async function handleStart(chatId: number, user: any, isAdmin: boolean) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const supabase = createClient();
  try {
    await supabase.from('users').upsert({
      telegram_id: user.id,
      name: `${user.first_name || ''} ${user.last_name || ''}`.trim(),
      username: user.username || '',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
  if (isAdmin) {
    const supabase = createClient();

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const { data: shops } = await supabase
      .from('shop_admins')
      .select('shops(*)')
      .eq('telegram_id', user.id);

    if (!shops || shops.length === 0) {
      return await sendMessage(
        chatId,
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤ –≤–µ–±-–∞–¥–º–∏–Ω–∫–µ.',
      );
    }

    let message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n';

    shops.forEach((shop: any, index: number) => {
      message += `${index + 1}. ${shop.shops.name}\n`;
    });

    message += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.';

    await sendMessage(chatId, message);
  } else {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const shop = await getUserShop(user.id);

    if (!shop) {
      return await sendMessage(
        chatId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    const inlineKeyboard = {
      inline_keyboard: [
        [
          {
            text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
            web_app: {
              url: `https://telegram-mini-app-tan-ten.vercel.app/shop/${shop.id}`,
            },
          },
        ],
      ],
    };

    await sendMessageWithKeyboard(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "${shop.name}"!\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∫—É–ø–∫–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
      inlineKeyboard,
    );
  }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserOrders(chatId: number, telegramId: number) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: orders, error } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('user_id', telegramId)
    .order('created_at', { ascending: false })
    .limit(5);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  if (!orders || orders.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
  }

  let message = 'üõí <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>\n\n';

  orders.forEach((order) => {
    message += `<b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
    message += `–ú–∞–≥–∞–∑–∏–Ω: ${order.shops.name}\n`;
    message += `–°—É–º–º–∞: ${order.total_amount.toFixed(2)} ‚ÇΩ\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
    message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n\n`;
  });

  await sendMessage(chatId, message);
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
export async function sendOrderStatusNotification(
  telegram_id: number,
  order_id: string,
  shop_name: string,
  status: string,
): Promise<void> {
  const statusText = getStatusText(status);
  const message = `–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order_id} –≤ –º–∞–≥–∞–∑–∏–Ω–µ "${shop_name}" ${statusText}`;

  await sendMessage(telegram_id, message);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async function sendMessageWithKeyboard(
  chatId: number,
  text: string,
  keyboard: any,
) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
          reply_markup: keyboard,
        }),
      },
    );

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

async function handleStats(chatId: number) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
  const { data: orders, error: ordersError } = await supabase
    .from('orders')
    .select('*')
    .in('shop_id', shopIds);

  if (ordersError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
    return await sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.',
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('*')
    .in('shop_id', shopIds);

  if (productsError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', productsError);
    return await sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.',
    );
  }

  // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É
  const totalRevenue =
    orders?.reduce((sum, order) => sum + order.total_amount, 0) || 0;

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  let message = 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n';
  message += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products?.length || 0}\n`;
  message += `üõí –ó–∞–∫–∞–∑–æ–≤: ${orders?.length || 0}\n`;
  message += `üí∞ –í—ã—Ä—É—á–∫–∞: $${totalRevenue.toFixed(2)}\n\n`;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
  const pendingOrders =
    orders?.filter((order) => order.status === 'pending').length || 0;
  const completedOrders =
    orders?.filter((order) => order.status === 'completed').length || 0;

  message += `‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${pendingOrders}\n`;
  message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedOrders}\n`;

  await sendMessage(chatId, message);
}

async function handleOrders(chatId: number, args: string[]) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
  const { data: orders, error } = await supabase
    .from('orders')
    .select('*')
    .in('shop_id', shopIds)
    .order('created_at', { ascending: false })
    .limit(5);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }

  if (!orders || orders.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
  }

  let message = 'üõí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>\n\n';

  orders.forEach((order, index) => {
    message += `<b>–ó–∞–∫–∞–∑ #${order.id}</b>\n`;
    message += `–°—É–º–º–∞: $${order.total_amount.toFixed(2)}\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}\n`;
    message += `–î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString()}\n`;

    if (order.telegram_username) {
      message += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${order.telegram_username}\n`;
    }

    message += '\n';
  });

  message +=
    '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/orders <id_–∑–∞–∫–∞–∑–∞> <–¥–µ–π—Å—Ç–≤–∏–µ>\n';
  message += '–î–µ–π—Å—Ç–≤–∏—è: confirm, complete, cancel';

  await sendMessage(chatId, message);
}

async function handleProducts(chatId: number, args: string[]) {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: shops } = await supabase
    .from('shop_admins')
    .select('shop_id')
    .eq('telegram_id', chatId);

  if (!shops || shops.length === 0) {
    return await sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
  }

  const shopIds = shops.map((shop) => shop.shop_id);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  const { data: products, error } = await supabase
    .from('products')
    .select('*')
    .in('shop_id', shopIds)
    .order('created_at', { ascending: false })
    .limit(10);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return await sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.');
  }

  if (!products || products.length === 0) {
    return await sendMessage(
      chatId,
      '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproduct –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.',
    );
  }

  let message = 'üì¶ <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</b>\n\n';

  products.forEach((product, index) => {
    message += `<b>${index + 1}. ${product.name}</b>\n`;
    message += `–¶–µ–Ω–∞: $${product.price.toFixed(2)}\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${product.status === 'active' ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
  });

  message +=
    '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/products <id_—Ç–æ–≤–∞—Ä–∞> <–¥–µ–π—Å—Ç–≤–∏–µ>\n';
  message += '–î–µ–π—Å—Ç–≤–∏—è: edit, delete, activate, deactivate';

  await sendMessage(chatId, message);
}

async function handleAddProduct(chatId: number) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
  // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

  await sendMessage(
    chatId,
    '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n\n' +
      '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' +
      '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É\n' +
      '4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n' +
      '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
  );
}

async function handleSettings(chatId: number, args: string[]) {
  await sendMessage(
    chatId,
    '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n' +
      '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/settings name <–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n' +
      '/settings description <–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n' +
      '/settings welcome <–Ω–æ–≤–æ–µ_–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n' +
      '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
  );
}

//  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleHelp(chatId: number, isAdmin: boolean) {
  let helpMessage = 'ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n';

  if (isAdmin) {
    helpMessage +=
      '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
      '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n' +
      '/orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n' +
      '/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n' +
      '/addproduct - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n' +
      '/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞\n' +
      '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n' +
      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
      '/help <–∫–æ–º–∞–Ω–¥–∞>';
  } else {
    helpMessage +=
      '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n' +
      '/orders - –í–∞—à–∏ –∑–∞–∫–∞–∑—ã\n' +
      '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞';
  }

  await sendMessage(chatId, helpMessage);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending':
      return '‚è≥';
    case 'processing':
      return 'üîÑ';
    case 'completed':
      return '‚úÖ';
    case 'cancelled':
      return '‚ùå';
    default:
      return '‚ùì';
  }
}

function getStatusText(status: string): string {
  switch (status) {
    case 'pending':
      return '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏';
    case 'processing':
      return '–ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É';
    case 'completed':
      return '–í—ã–ø–æ–ª–Ω–µ–Ω';
    case 'cancelled':
      return '–û—Ç–º–µ–Ω–µ–Ω';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

//  —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId: number, text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
        }),
      },
    );

    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    }
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
export async function sendOrderNotificationToAdmins(
  order_id: string,
  shop_id: string,
  total_amount: number,
  customer_info: string,
): Promise<void> {
  const supabase = createClient();

  // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
  const { data: admins, error } = await supabase
    .from('shop_admins')
    .select('telegram_id')
    .eq('shop_id', shop_id)
    .eq('role', 'admin');

  if (error || !admins || admins.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
  const { data: shop } = await supabase
    .from('shops')
    .select('name')
    .eq('id', shop_id)
    .single();

  const shopName = shop ? shop.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω';

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: '–ü—Ä–∏–Ω—è—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
          callback_data: `order_${order_id}_processing`,
        },
        { text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data: `order_${order_id}_completed` },
      ],
      [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `order_${order_id}_cancelled` }],
    ],
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  for (const admin of admins) {
    const message =
      `üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order_id}</b>\n\n` +
      `–ú–∞–≥–∞–∑–∏–Ω: ${shopName}\n` +
      `–°—É–º–º–∞: ${total_amount.toFixed(2)} ‚ÇΩ\n` +
      `–ö–ª–∏–µ–Ω—Ç: ${customer_info}\n\n` +
      `–°—Ç–∞—Ç—É—Å: ${getStatusEmoji('pending')} ${getStatusText('pending')}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await sendMessageWithKeyboard(admin.telegram_id, message, keyboard);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
export async function processCallback(
  callbackData: string,
  chatId: number,
): Promise<void> {
  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
  const parts = callbackData.split('_');

  if (parts[0] === 'order' && parts.length === 3) {
    const orderId = parts[1];
    const newStatus = parts[2];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await updateOrderStatus(orderId, newStatus, chatId);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function updateOrderStatus(
  orderId: string,
  status: string,
  adminId: number,
): Promise<void> {
  const supabase = createClient();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
  const { data: order, error: orderError } = await supabase
    .from('orders')
    .select(
      `
      *,
      shops:shop_id (name)
    `,
    )
    .eq('id', orderId)
    .single();

  if (orderError || !order) {
    await sendMessage(adminId, `‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { data: adminAccess } = await supabase
    .from('shop_admins')
    .select('*')
    .eq('telegram_id', adminId)
    .eq('shop_id', order.shop_id)
    .single();

  if (!adminAccess) {
    await sendMessage(
      adminId,
      `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º.`,
    );
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  const { error: updateError } = await supabase
    .from('orders')
    .update({
      status,
      updated_at: new Date().toISOString(),
    })
    .eq('id', orderId);

  if (updateError) {
    await sendMessage(
      adminId,
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: ${updateError.message}`,
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await sendMessage(
    adminId,
    `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${getStatusText(status)}"`,
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (order.user_id) {
    await sendOrderStatusNotification(
      order.user_id,
      orderId,
      order.shops.name,
      status,
    );
  }
}
