"use client"

import { useEffect, useState } from "react"
import ShopContent from "./ShopContent"
import TelegramShopDebug from "./TelegramShopDebug"
import type { Shop } from "@/types/shop"
import type { TelegramUser } from "@/types/user"

interface TelegramShopProps {
  shop: Shop
  telegramUser: TelegramUser
}

export default function TelegramShop({ shop, telegramUser }: TelegramShopProps) {
  const [isTelegram, setIsTelegram] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      const tg = (window as any).Telegram?.WebApp

      if (tg) {
        console.log("Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", tg)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
        tg.ready()
        tg.expand()

        setIsTelegram(true)

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const user = tg.initDataUnsafe?.user
        if (user) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
          saveUserToDatabase(user)
        }

        console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
      } else {
        console.log("Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≤–µ–±-—Ä–µ–∂–∏–º–µ")
        setIsTelegram(false)
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:", err)
      setIsTelegram(false)
    } finally {
      setIsLoading(false)
    }
  }, [])

  const saveUserToDatabase = async (user: any) => {
    try {
      await fetch("/api/users", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          telegram_id: user.id,
          username: user.username,
          first_name: user.first_name,
          last_name: user.last_name,
          language_code: user.language_code,
        }),
      })
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="text-4xl mb-4">üõçÔ∏è</div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞...</p>
        </div>
      </div>
    )
  }

  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  return (
    <div
      className="min-h-screen"
      style={{
        backgroundColor: isTelegram ? (window as any).Telegram?.WebApp?.themeParams?.bg_color || "#ffffff" : "#ffffff",
        color: isTelegram ? (window as any).Telegram?.WebApp?.themeParams?.text_color || "#000000" : "#000000",
      }}
    >
      <ShopContent shop={shop} telegramUser={telegramUser} isTelegram={isTelegram} />
      <TelegramShopDebug />
    </div>
  )
}
